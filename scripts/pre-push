#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local oid> <remote ref> <remote oid>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"
oldhash=$(cat package.json | node -pe 'JSON.parse(process.argv[1]).versionHash' "$(cat package.json)")
newhash=$(find src -type f -print0 | sort -z | xargs -0 sha1sum | sha1sum | cut -d ' ' -f 1)

while read local_ref local_oid remote_ref remote_oid
do
	# If pushing to master and code has changed since last push
	if [ "$remote_ref" == 'refs/heads/master' ] && [ "$newhash" != "$oldhash" ]; then
		HEAD_TAG=$(git describe --tags) 										# get HEAD tag
		if [ -z $(git tag --list | grep $HEAD_TAG) ]; then						# check if HEAD tag is in list of real tags
			echo 'Updating application version...'
			npm version patch         											# if HEAD is not tagged, update patch version before pushing
			echo 'Application version updated, please retry push'
			exit 1
		fi
	fi
done

exit 0
